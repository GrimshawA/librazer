import std

/*
	Pong Game
	---------

	Implementation translated from a open-source pong game written in java

	Used as a proof of concept, to build compiler features until the game actually runs well.
*/
class PongGame {	

	height: int32
	width: int32
	timer: float 5
	first: boolean true

	window: Window
	
	// pad
	speed: int32 1
	padH: int32 10
	padW: int32 40
	bottomPadX: int32
	topPadX: int32
	inset: int32 10
	
	// ball
	ballX: float
	ballY: float
	velX: float 1
	velY: float 1
	ballSize: float 20
	
	// score
	scoreTop: int32
	scoreBottom: int32
	
	function main() {
		Window wnd = new Window();
		wnd.open();
		wnd.setSize(400, 200);

		/*height = */wnd.height();

		//window = wnd;

		wnd.setFillColor(255, 0, 255);

		Timer t = new Timer();
		while(wnd.running()) {
			wnd.poll();

			//height = wnd.height();

			//update(t.restart());
			/*paint(wnd);
			if (wnd.keyPressed(114)) {
				wnd.setFillColor(255, 0, 0);
				wnd.drawRect(0, 0, 400, 200);
			}
			wnd.setFillColor(255, 0, 255);
			wnd.drawRect(0, 0, 400, 100);*/
			wnd.display();
		}
	}

	function update(float dt) {
		/*timer = timer - dt;
		if (timer < 0) {
			timer = 5;
			timerEvent();
		}*/
	}

	function timerEvent() {
		// side walls
		/*if (ballX < 0 || ballX > width - ballSize) {
			velX = -velX;
		}
		// top / down walls
		if (ballY < 0) {
			velY = -velY;
			scoreBottom = scoreBottom + 1;
		}
		
		if (ballY + ballSize > height) {
			velY = -velY;
			scoreTop = scoreTop + 1;
		}
		// bottom pad
		if (ballY + ballSize >= height - padH - inset && velY > 0) {
			if (ballX + ballSize >= bottomPadX && ballX <= bottomPadX + padW) {
				velY = -velY;
			}
		}

		// top pad
		if (ballY <= padH + inset && velY < 0) {
			if (ballX + ballSize >= topPadX && ballX <= topPadX + padW) {
				velY = -velY;
			}
		}

		ballX = ballX + velX;
		ballY = ballY + velY;
		*/
		// pressed keys
		/*if (window.isPressed(23)) {
			//bottomPadX = bottomPadX - (bottomPadX > 0) ? speed : 0;
		}
		else if (window.isPressed(24)) {
			//bottomPadX += (bottomPadX < width - padW) ? speed : 0;
		}*/
		
		// AI
		/*float delta = ballX - topPadX;
		if (delta > 0) {
			//topPadX += (topPadX < width - padW) ? speed : 0;
		}
		else if (delta < 0) {
			//topPadX -= (topPadX > 0) ? speed : 0;
		}*/
	}
	
	function paint(Window wnd) {
		wnd.setFillColor(0, 0, 255);
		wnd.drawRect(0, 0, 200, 200);

		if (wnd.keyPressed(115)) {
			wnd.setFillColor(255, 100, 0);
			wnd.drawRect(100, 0, 400, 200);
		}

		//height = wnd.height();
		/*width = wnd.width();

		// initial positioning
		/*if (first) {
			bottomPadX = width / 2 - padW / 2;
			topPadX = bottomPadX;
			ballX = width / 2 - ballSize / 2;
			ballY = height / 2 - ballSize / 2;
			first = false;
		}
		
		// bottom pad
		wnd.drawRect(bottomPadX, height - padH - inset, padW, padH);
		
		// top pad
		wnd.drawRect(topPadX, inset, padW, padH);
	
		// ball
		wnd.drawRect(ballX, ballY, ballSize, ballSize);
	
		// scores
		String scoreB = toString(scoreBottom);
		String scoreT = toString(scoreTop);
		wnd.drawString(scoreB, 10, height / 2);
		wnd.drawString(scoreT, width - 50, height / 2);*/
	}
}