import std

/*
	Pong Game
	---------

	Implementation translated from a open-source pong game written in java

	Used as a proof of concept, to build compiler features until the game actually runs well.
*/
class PongGame {	
	
	timer: float 5
	first: bool true
	height: int32
	width: int32
	removeMe: float


	window: Window
	
	// pad
	speed: int32 1
	padH: int32 10
	padW: int32 40
	bottomPadX: int32
	topPadX: int32
	inset: int32 10
	
	// ball
	ballX: float
	ballY: float
	velX: float 1
	velY: float 1
	ballSize: float 20
	time: int32

	mPad: Rect
	mEnemyPad: Rect

	mTimer: Timer
	
	
	// score
	scoreTop: int32
	scoreBottom: int32
	
	function main() {
		Window wnd = new Window();
		wnd.open();
		wnd.setSize(400, 400);
		wnd.setFillColor(255, 0, 255);

		bottomPadX = 10;
		topPadX = 10;
		padH = 10;
		ballSize = 6;
		ballX = 40;
		ballY = 100;
		velX = 1;
		velY = 1;
		time = 5;

		/*bottomPadX = wdth / 2 - padW / 2;
		topPadX = bottomPadX;
		ballX = width / 2 - ballSize / 2;
		ballY = height / 2 - ballSize / 2;*/

		Timer t = new Timer();
		mTimer = t;

		mPad = new Rect();
		mPad.setPosition(0,0);
		mPad.setSize(80, 10);

		mEnemyPad = new Rect();
		mEnemyPad.setPosition(20, 390);
		mEnemyPad.setSize(80, 10);

		while(wnd.running()) {
			wnd.poll();
			update(wnd);
			paint(wnd);
			wnd.display();
		}
	}

	function update(Window wnd) {

		int32 dt = mTimer.restart();

		time = time - dt;

		if (time < 0) {
			time = 5;
			timerEvent(wnd);
		}
	}

	function timerEvent(Window wnd) {

		wnd.debug();

		if (wnd.keyPressed(97)) {
			bottomPadX = bottomPadX - 1;
			mPad.setPosition(bottomPadX, 0);
		}

		if (wnd.keyPressed(100)) {
			bottomPadX = bottomPadX + 1;
			mPad.setPosition(bottomPadX, 0);
		}

		// side walls
		/*if (ballX < 0 || ballX > width - ballSize) {
			velX = -velX;
		}*/
		if (ballX < 0) {
			velX = -velX;
			//scoreBottom = scoreBottom + 1;
		}


		// top / down walls
		if (ballY < 0) {
			velY = -velY;
			//scoreBottom = scoreBottom + 1;
		}

		if (ballY > wnd.height()) {
			velY = -velY;
		}

		if (ballX > wnd.width()) {
			velX = -velX;
		}
		
		/*if (ballY + ballSize > height) {
			velY = -velY;
			scoreTop = scoreTop + 1;
		}
		// bottom pad
		if (ballY + ballSize >= height - padH - inset && velY > 0) {
			if (ballX + ballSize >= bottomPadX && ballX <= bottomPadX + padW) {
				velY = -velY;
			}
		}

		// top pad
		if (ballY <= padH + inset && velY < 0) {
			if (ballX + ballSize >= topPadX && ballX <= topPadX + padW) {
				velY = -velY;
			}
		}
		*/

		float a = ballY + ballSize;
		float b = wnd.height() - padH;
		/*if (a >= 10) {
			if (velY < 0) {
				if (ballX + ballSize >= bottomPadX) {
					if (ballX <= bottomPadX + padW) {
						velY = -velY;
					}	
				}
			}
			
		}*/

		if (mPad.contains(ballX, ballY)) {
			velY = -velY;
			ballY = 10;
		}

		if (mEnemyPad.contains(ballX, ballY)) {
			velY = -velY;
			ballY = 390;
		}

		ballX = ballX + velX;
		ballY = ballY + velY;
		
		// pressed keys
		/*if (window.isPressed(23)) {
			//bottomPadX = bottomPadX - (bottomPadX > 0) ? speed : 0;
		}
		else if (window.isPressed(24)) {
			//bottomPadX += (bottomPadX < width - padW) ? speed : 0;
		}*/
		
		// AI
		float delta = ballX - topPadX;
		if (delta > 0) {
			if (topPadX < wnd.width() - padW) {
				topPadX = topPadX + 1;
				mEnemyPad.setPosition(topPadX, 390);
			}
		}
		if (delta < 0) {
			if (topPadX > 0) {
				topPadX = topPadX - 1;
				mEnemyPad.setPosition(topPadX, 390);
			}
		}
	}
	
	function paint(Window wnd) {
		wnd.setFillColor(0, 0, 0);
		wnd.drawRect(0, 0, 400, 400);

		if (wnd.keyPressed(115)) {
			wnd.setFillColor(255, 100, 0);
			wnd.drawRect(100, 0, 400, 200);
		}

		height = wnd.height();
		width = wnd.width();

		wnd.setFillColor(120, 200, 20);
		
		// bottom pad
		//wnd.drawRect(bottomPadX, height - padH - inset, padW, padH);
		wnd.drawRect(bottomPadX, 0, 80, padH);
		
		// top pad
		//wnd.drawRect(topPadX, inset, padW, padH);
		wnd.drawRect(topPadX, 390, 80, padH);
	
		// ball
		//wnd.drawRect(ballX, ballY, ballSize, ballSize);
		wnd.drawRect(ballX, ballY, ballSize, ballSize);

		// Back to black
		wnd.setFillColor(0, 0, 0);
	
		// scores
		/*String scoreB = toString(scoreBottom);
		String scoreT = toString(scoreTop);
		wnd.drawString(scoreB, 10, height / 2);
		wnd.drawString(scoreT, width - 50, height / 2);*/
	}
}