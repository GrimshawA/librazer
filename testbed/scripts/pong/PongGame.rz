import std

/*
	Pong Game
	---------

	Implementation translated from a open-source pong game written in java

	Used as a proof of concept, to build compiler features until the game actually runs well.
*/
class PongGame {	

	height: int
	width: int
	timer: float 5
	first: boolean true
	
	// pad
	speed: int 1
	padH: int 10
	padW: int 40
	bottomPadX: int
	topPadX: int
	inset: int 10
	
	// ball
	ballX: float
	ballY: float
	velX: float 1
	velY: float 1
	ballSize: float 20
	
	// score
	scoreTop: int
	scoreBottom: int
	
	function main() {
		Window wnd = new Window();
		wnd.open();

		Timer t = new Timer();
		while(wnd.running()) {
			/*wnd.poll();
			update(t.restart());
			paint(wnd);
			wnd.display();*/
		}
	}

	function update(float dt) {
		/*timer = timer - dt;
		if (timer < 0.f) {
			timer = 5
			timerEvent();
		}*/
	}

	function timerEvent() {
		// side walls
		/*if (ballX < 0 || ballX > width - ballSize) {
			velX = -velX;
		}
		// top / down walls
		if (ballY < 0) {
			velY = -velY;
			++ scoreBottom;
		}
		
		if (ballY + ballSize > height) {
			velY = -velY;
			++ scoreTop;
		}
		// bottom pad
		if (ballY + ballSize >= height - padH - inset && velY > 0)
			if (ballX + ballSize >= bottomPadX && ballX <= bottomPadX + padW)
				velY = -velY;

		// top pad
		if (ballY <= padH + inset && velY < 0)
			if (ballX + ballSize >= topPadX && ballX <= topPadX + padW)
				velY = -velY;

		ballX += velX;
		ballY += velY;
		
		// pressed keys
		if (isPressed(23)) {
			bottomPadX -= (bottomPadX > 0) ? speed : 0;
		}
		else if (isPressed(24)) {
			bottomPadX += (bottomPadX < width - padW) ? speed : 0;
		}
		
		// AI
		double delta = ballX - topPadX;
		if (delta > 0) {
			topPadX += (topPadX < width - padW) ? speed : 0;
		}
		else if (delta < 0) {
			topPadX -= (topPadX > 0) ? speed : 0;
		}*/
	}
	
	function paint(Window wnd) {
		
		/*height = wnd.height();
		width = wnd.width();

		// initial positioning
		if (first) {
			bottomPadX = width / 2 - padW / 2;
			topPadX = bottomPadX;
			ballX = width / 2 - ballSize / 2;
			ballY = height / 2 - ballSize / 2;
			first = false;
		}
		
		// bottom pad
		wnd.drawRect(bottomPadX, height - padH - inset, padW, padH);
		
		// top pad
		wnd.drawRect(topPadX, inset, padW, padH);
	
		// ball
		wnd.drawRect(ballX, ballY, ballSize, ballSize);
	
		// scores
		String scoreB = toString(scoreBottom);
		String scoreT = toString(scoreTop);
		wnd.drawString(scoreB, 10, height / 2);
		wnd.drawString(scoreT, width - 50, height / 2);*/
	}
}